// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Field tests render should render with errors correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Field
    content=""
    error="Big bad error"
    id="email"
    label="Email:"
    name="email"
    onChange={[Function]}
    placeholder="Enter email..."
    size="normal"
    type="email"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="field-label"
        >
          Email:
        </p>,
        <p
          className="field-error-label"
        >
          Big bad error
        </p>,
        <div
          className="field-outer"
        >
          <input
            className="field normal field-error-border"
            error="Big bad error"
            id="email"
            name="email"
            onChange={[Function]}
            placeholder="Enter email..."
            type="email"
            value=""
          />
        </div>,
      ],
      "className": "field-wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Email:",
          "className": "field-label",
        },
        "ref": null,
        "rendered": "Email:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Big bad error",
          "className": "field-error-label",
        },
        "ref": null,
        "rendered": "Big bad error",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            className="field normal field-error-border"
            error="Big bad error"
            id="email"
            name="email"
            onChange={[Function]}
            placeholder="Enter email..."
            type="email"
            value=""
          />,
          "className": "field-outer",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "field normal field-error-border",
            "error": "Big bad error",
            "id": "email",
            "name": "email",
            "onChange": [Function],
            "placeholder": "Enter email...",
            "type": "email",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="field-label"
          >
            Email:
          </p>,
          <p
            className="field-error-label"
          >
            Big bad error
          </p>,
          <div
            className="field-outer"
          >
            <input
              className="field normal field-error-border"
              error="Big bad error"
              id="email"
              name="email"
              onChange={[Function]}
              placeholder="Enter email..."
              type="email"
              value=""
            />
          </div>,
        ],
        "className": "field-wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Email:",
            "className": "field-label",
          },
          "ref": null,
          "rendered": "Email:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Big bad error",
            "className": "field-error-label",
          },
          "ref": null,
          "rendered": "Big bad error",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              className="field normal field-error-border"
              error="Big bad error"
              id="email"
              name="email"
              onChange={[Function]}
              placeholder="Enter email..."
              type="email"
              value=""
            />,
            "className": "field-outer",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "field normal field-error-border",
              "error": "Big bad error",
              "id": "email",
              "name": "email",
              "onChange": [Function],
              "placeholder": "Enter email...",
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Field tests render should render without errors correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Field
    content=""
    error={null}
    id="email"
    label="Email:"
    name="email"
    onChange={[Function]}
    placeholder="Enter email..."
    size="normal"
    type="email"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="field-label"
        >
          Email:
        </p>,
        <p
          className="field-error-label"
        />,
        <div
          className="field-outer"
        >
          <input
            className="field normal "
            error={null}
            id="email"
            name="email"
            onChange={[Function]}
            placeholder="Enter email..."
            type="email"
            value=""
          />
        </div>,
      ],
      "className": "field-wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Email:",
          "className": "field-label",
        },
        "ref": null,
        "rendered": "Email:",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": null,
          "className": "field-error-label",
        },
        "ref": null,
        "rendered": null,
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <input
            className="field normal "
            error={null}
            id="email"
            name="email"
            onChange={[Function]}
            placeholder="Enter email..."
            type="email"
            value=""
          />,
          "className": "field-outer",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "field normal ",
            "error": null,
            "id": "email",
            "name": "email",
            "onChange": [Function],
            "placeholder": "Enter email...",
            "type": "email",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="field-label"
          >
            Email:
          </p>,
          <p
            className="field-error-label"
          />,
          <div
            className="field-outer"
          >
            <input
              className="field normal "
              error={null}
              id="email"
              name="email"
              onChange={[Function]}
              placeholder="Enter email..."
              type="email"
              value=""
            />
          </div>,
        ],
        "className": "field-wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Email:",
            "className": "field-label",
          },
          "ref": null,
          "rendered": "Email:",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": null,
            "className": "field-error-label",
          },
          "ref": null,
          "rendered": null,
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <input
              className="field normal "
              error={null}
              id="email"
              name="email"
              onChange={[Function]}
              placeholder="Enter email..."
              type="email"
              value=""
            />,
            "className": "field-outer",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "field normal ",
              "error": null,
              "id": "email",
              "name": "email",
              "onChange": [Function],
              "placeholder": "Enter email...",
              "type": "email",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
