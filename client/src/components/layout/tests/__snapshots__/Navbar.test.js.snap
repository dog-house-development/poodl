// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Navbar tests render should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Navbar
    content="Press me"
    onClick={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <nav
        className="z-depth-0"
      >
        <div
          className="nav-wrapper white"
        >
          <Link
            replace={false}
            to="/"
          >
            Poodl
          </Link>
        </div>
      </nav>,
      "className": "navbar-fixed",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="nav-wrapper white"
        >
          <Link
            replace={false}
            to="/"
          >
            Poodl
          </Link>
        </div>,
        "className": "z-depth-0",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            replace={false}
            to="/"
          >
            Poodl
          </Link>,
          "className": "nav-wrapper white",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Poodl",
            "replace": false,
            "to": "/",
          },
          "ref": null,
          "rendered": "Poodl",
          "type": [Function],
        },
        "type": "div",
      },
      "type": "nav",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <nav
          className="z-depth-0"
        >
          <div
            className="nav-wrapper white"
          >
            <Link
              replace={false}
              to="/"
            >
              Poodl
            </Link>
          </div>
        </nav>,
        "className": "navbar-fixed",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="nav-wrapper white"
          >
            <Link
              replace={false}
              to="/"
            >
              Poodl
            </Link>
          </div>,
          "className": "z-depth-0",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              replace={false}
              to="/"
            >
              Poodl
            </Link>,
            "className": "nav-wrapper white",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Poodl",
              "replace": false,
              "to": "/",
            },
            "ref": null,
            "rendered": "Poodl",
            "type": [Function],
          },
          "type": "div",
        },
        "type": "nav",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
