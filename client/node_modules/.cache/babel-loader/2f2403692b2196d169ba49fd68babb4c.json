{"ast":null,"code":"import _toConsumableArray from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/samuelbehrens/Documents/WebProjects/poodl/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/samuelbehrens/Documents/WebProjects/poodl/client/src/CommentBox.js\";\nimport React, { Component } from 'react';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport DATA from './data';\nimport './CommentBox.css';\n\nvar CommentBox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentBox, _Component);\n\n  function CommentBox() {\n    var _this;\n\n    _classCallCheck(this, CommentBox);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentBox).call(this));\n\n    _this.loadCommentsFromServer = function () {\n      // fetch returns a promise. If you are not familiar with promises, see\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n      fetch('/api/comments/').then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        if (!res.success) _this.setState({\n          error: res.error\n        });else _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.onChangeText = function (e) {\n      var newState = _objectSpread({}, _this.state);\n\n      newState[e.target.name] = e.target.value;\n\n      _this.setState(newState);\n    };\n\n    _this.submitComment = function (e) {\n      e.preventDefault();\n      var _this$state = _this.state,\n          author = _this$state.author,\n          text = _this$state.text;\n      if (!author || !text) return;\n      fetch('/api/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          author: author,\n          text: text\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (!res.success) _this.setState({\n          error: res.error.message || res.error\n        });else _this.setState({\n          author: '',\n          text: '',\n          error: null\n        });\n      });\n    };\n\n    _this.onUpdateComment = function (id) {\n      var oldComment = _this.state.data.find(function (c) {\n        return c._id === id;\n      });\n\n      if (!oldComment) return;\n\n      _this.setState({\n        author: oldComment.author,\n        text: oldComment.text,\n        updateId: id\n      });\n    };\n\n    _this.onDeleteComment = function (id) {\n      var i = _this.state.data.findIndex(function (c) {\n        return c._id === id;\n      });\n\n      var data = [].concat(_toConsumableArray(_this.state.data.slice(0, i)), _toConsumableArray(_this.state.data.slice(i + 1)));\n\n      _this.setState({\n        data: data\n      });\n\n      fetch(\"api/comments/\".concat(id), {\n        method: 'DELETE'\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (!res.success) _this.setState({\n          error: res.error\n        });\n      });\n    };\n\n    _this.submitComment = function (e) {\n      e.preventDefault();\n      var _this$state2 = _this.state,\n          author = _this$state2.author,\n          text = _this$state2.text,\n          updateId = _this$state2.updateId;\n      if (!author || !text) return;\n\n      if (updateId) {\n        _this.submitUpdatedComment();\n      } else {\n        _this.submitNewComment();\n      }\n    };\n\n    _this.submitNewComment = function () {\n      var _this$state3 = _this.state,\n          author = _this$state3.author,\n          text = _this$state3.text;\n      var data = [].concat(_toConsumableArray(_this.state.data), [{\n        author: author,\n        text: text,\n        _id: Date.now().toString(),\n        updatedAt: new Date(),\n        createdAt: new Date()\n      }]);\n\n      _this.setState({\n        data: data\n      });\n\n      fetch('/api/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          author: author,\n          text: text\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (!res.success) _this.setState({\n          error: res.error.message || res.error\n        });else _this.setState({\n          author: '',\n          text: '',\n          error: null\n        });\n      });\n    };\n\n    _this.submitUpdatedComment = function () {\n      var _this$state4 = _this.state,\n          author = _this$state4.author,\n          text = _this$state4.text,\n          updateId = _this$state4.updateId;\n      fetch(\"/api/comments/\".concat(updateId), {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          author: author,\n          text: text\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (res) {\n        if (!res.success) _this.setState({\n          error: res.error.message || res.error\n        });else _this.setState({\n          author: '',\n          text: '',\n          updateId: null\n        });\n      });\n    };\n\n    _this.state = {\n      data: [],\n      error: null,\n      author: '',\n      text: ''\n    };\n    _this.pollInterval = null;\n    return _this;\n  }\n\n  _createClass(CommentBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.loadCommentsFromServer();\n\n      if (!this.pollInterval) {\n        this.pollInterval = setInterval(this.loadCommentsFromServer, 2000);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.pollInterval) clearInterval(this.pollInterval);\n      this.pollInterval = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"comments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Comments:\"), React.createElement(CommentList, {\n        data: this.state.data,\n        handleDeleteComment: this.onDeleteComment,\n        handleUpdateComment: this.onUpdateComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(CommentForm, {\n        author: this.state.author,\n        text: this.state.text,\n        handleChangeText: this.onChangeText,\n        handleSubmit: this.submitComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })), this.state.error && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.state.error));\n    }\n  }]);\n\n  return CommentBox;\n}(Component);\n\nexport default CommentBox;","map":{"version":3,"sources":["/Users/samuelbehrens/Documents/WebProjects/poodl/client/src/CommentBox.js"],"names":["React","Component","CommentList","CommentForm","DATA","CommentBox","loadCommentsFromServer","fetch","then","data","json","res","success","setState","error","onChangeText","e","newState","state","target","name","value","submitComment","preventDefault","author","text","method","headers","body","JSON","stringify","message","onUpdateComment","id","oldComment","find","c","_id","updateId","onDeleteComment","i","findIndex","slice","submitUpdatedComment","submitNewComment","Date","now","toString","updatedAt","createdAt","pollInterval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport DATA from './data';\nimport './CommentBox.css';\n\nclass CommentBox extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      error: null,\n      author: '',\n      text: ''\n    };\n    this.pollInterval = null;\n  }\n  componentDidMount() {\n    this.loadCommentsFromServer();\n    if (!this.pollInterval) {\n      this.pollInterval = setInterval(this.loadCommentsFromServer, 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.pollInterval) clearInterval(this.pollInterval);\n    this.pollInterval = null;\n  }\n\n  loadCommentsFromServer = () => {\n    // fetch returns a promise. If you are not familiar with promises, see\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n    fetch('/api/comments/')\n      .then(data => data.json())\n      .then((res) => {\n        if (!res.success) this.setState({ error: res.error });\n        else this.setState({ data: res.data });\n      });\n  }\n  onChangeText = (e) => {\n    const newState = { ...this.state };\n    newState[e.target.name] = e.target.value;\n    this.setState(newState);\n  }\n\n  submitComment = (e) => {\n      e.preventDefault();\n      const { author, text } = this.state;\n      if (!author || !text) return;\n      fetch('/api/comments', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ author, text }),\n      }).then(res => res.json()).then((res) => {\n        if (!res.success) this.setState({ error: res.error.message || res.error });\n        else this.setState({ author: '', text: '', error: null });\n      });\n    }\n\n    onUpdateComment = (id) => {\n    const oldComment = this.state.data.find(c => c._id === id);\n    if (!oldComment) return;\n    this.setState({\n        author: oldComment.author,\n        text: oldComment.text,\n        updateId: id\n    });\n  }\n\n  onDeleteComment = (id) => {\n    const i = this.state.data.findIndex(c => c._id === id);\n    const data = [\n      ...this.state.data.slice(0, i),\n      ...this.state.data.slice(i + 1),\n    ];\n    this.setState({ data });\n    fetch(`api/comments/${id}`, { method: 'DELETE' })\n      .then(res => res.json()).then((res) => {\n        if (!res.success) this.setState({ error: res.error });\n      });\n  }\n\n  submitComment = (e) => {\n    e.preventDefault();\n    const { author, text, updateId } = this.state;\n    if (!author || !text) return;\n    if (updateId) {\n      this.submitUpdatedComment();\n    } else {\n      this.submitNewComment();\n    }\n  }\n\n  submitNewComment = () => {\n    const { author, text } = this.state;\n    const data = [\n      ...this.state.data,\n      {\n        author,\n          text,\n          _id: Date.now().toString(),\n          updatedAt: new Date(),\n          createdAt: new Date()\n      },\n    ];\n    this.setState({ data });\n    fetch('/api/comments', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ author, text }),\n    }).then(res => res.json()).then((res) => {\n      if (!res.success) this.setState({ error: res.error.message || res.error });\n      else this.setState({ author: '', text: '', error: null });\n    });\n  }\n\n  submitUpdatedComment = () => {\n    const { author, text, updateId } = this.state;\n    fetch(`/api/comments/${updateId}`, {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ author, text }),\n    }).then(res => res.json()).then((res) => {\n      if (!res.success) this.setState({ error: res.error.message || res.error });\n      else this.setState({ author: '', text: '', updateId: null });\n    });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"comments\">\n          <h2>Comments:</h2>\n          <CommentList\n            data={this.state.data}\n            handleDeleteComment={this.onDeleteComment}\n            handleUpdateComment={this.onUpdateComment}\n            />\n        </div>\n        <div className=\"form\">\n        <CommentForm\n            author={this.state.author}\n            text={this.state.text}\n            handleChangeText={this.onChangeText}\n            handleSubmit={this.submitComment}\n            />\n        </div>\n        {this.state.error && <p>{this.state.error}</p>}\n      </div>\n    );\n  }\n}\n\nexport default CommentBox;\n"]},"metadata":{},"sourceType":"module"}